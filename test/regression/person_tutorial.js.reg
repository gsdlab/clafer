scope({c0_Address:2, c0_City:2, c0_Country:2, c0_DateOfBirth:2, c0_Divorced:2, c0_Female:2, c0_Gender:2, c0_Male:2, c0_MaritalStatus:2, c0_Married:2, c0_Name:2, c0_NeverMarried:2, c0_NorthAmericanCountry:2, c0_OneToTenPersonLine:0, c0_Person:2, c0_PostalCode:2, c0_Street:2, c0_Surname:2, c0_TwoPersonLine:0, c0_UnitNo:2, c0_WaitingLine:4, c0_date:2, c0_participants:8});
defaultScope(1);
intRange(-8, 7);
stringLength(16);

c0_date = Abstract("c0_date");
c0_NorthAmericanCountry = Abstract("c0_NorthAmericanCountry");
c0_Canada = Clafer("c0_Canada").withCard(1, 1);
c0_USA = Clafer("c0_USA").withCard(1, 1);
c0_Person = Abstract("c0_Person");
c0_Name = c0_Person.addChild("c0_Name").withCard(1, 1);
c0_Surname = c0_Person.addChild("c0_Surname").withCard(1, 1);
c0_DateOfBirth = c0_Person.addChild("c0_DateOfBirth").withCard(1, 1);
c0_Gender = c0_Person.addChild("c0_Gender").withCard(1, 1).withGroupCard(1);
c0_Male = c0_Gender.addChild("c0_Male").withCard(0, 1);
c0_Female = c0_Gender.addChild("c0_Female").withCard(0, 1);
c0_MaritalStatus = c0_Person.addChild("c0_MaritalStatus").withCard(1, 1).withGroupCard(1, 1);
c0_NeverMarried = c0_MaritalStatus.addChild("c0_NeverMarried").withCard(0, 1);
c0_Married = c0_MaritalStatus.addChild("c0_Married").withCard(0, 1);
c0_Divorced = c0_MaritalStatus.addChild("c0_Divorced").withCard(0, 1);
c0_Address = c0_Person.addChild("c0_Address").withCard(1, 1);
c0_Street = c0_Address.addChild("c0_Street").withCard(1, 1);
c0_UnitNo = c0_Street.addChild("c0_UnitNo").withCard(0, 1);
c0_City = c0_Address.addChild("c0_City").withCard(1, 1);
c0_Country = c0_Address.addChild("c0_Country").withCard(1, 1);
c0_PostalCode = c0_Address.addChild("c0_PostalCode").withCard(1, 1);
c0_JohnDoe = Clafer("c0_JohnDoe").withCard(1, 1);
c0_Student = Abstract("c0_Student");
c0_StudentId = c0_Student.addChild("c0_StudentId").withCard(1, 1);
c0_WaitingLine = Abstract("c0_WaitingLine");
c0_participants = c0_WaitingLine.addChild("c0_participants");
c0_MaryJane = Clafer("c0_MaryJane").withCard(1, 1);
c0_BusLine = Clafer("c0_BusLine").withCard(1, 1);
c0_JohnAndMaryLine = Clafer("c0_JohnAndMaryLine").withCard(1, 1);
c0_TwoPersonLine = Abstract("c0_TwoPersonLine");
c0_OneToTenPersonLine = Abstract("c0_OneToTenPersonLine");
c0_date.refTo(string);
c0_Canada.extending(c0_NorthAmericanCountry);
c0_USA.extending(c0_NorthAmericanCountry);
c0_Name.refToUnique(string);
c0_Surname.refToUnique(string);
c0_DateOfBirth.extending(c0_date);
c0_Street.refToUnique(string);
c0_UnitNo.refToUnique(string);
c0_City.refToUnique(string);
c0_Country.refToUnique(c0_NorthAmericanCountry);
c0_PostalCode.refToUnique(string);
c0_JohnDoe.extending(c0_Person);
c0_JohnDoe.addConstraint(and(and(and(and(and(and(and(and(equal(joinRef(join($this(), c0_Name)), constant("\"John\"")), equal(joinRef(join($this(), c0_Surname)), constant("\"Doe\""))), equal(joinRef(join($this(), c0_DateOfBirth)), constant("\"01/02/1985\""))), some(join(join($this(), c0_Gender), c0_Male))), some(join(join($this(), c0_MaritalStatus), c0_Married))), equal(joinRef(join(join($this(), c0_Address), c0_Street)), constant("\"123 Main St.\""))), equal(joinRef(join(join($this(), c0_Address), c0_City)), constant("\"Great Town\""))), equal(joinRef(join(join($this(), c0_Address), c0_Country)), global(c0_Canada))), equal(joinRef(join(join($this(), c0_Address), c0_PostalCode)), constant("\"A1B 2C3\""))));
c0_Student.extending(c0_Person);
c0_StudentId.refToUnique(string);
c0_participants.refToUnique(c0_Person);
c0_MaryJane.extending(c0_Student);
c0_MaryJane.addConstraint(equal(joinRef(join($this(), c0_StudentId)), constant("\"MJ13421354\"")));
c0_BusLine.extending(c0_WaitingLine);
c0_BusLine.addConstraint(and($in(global(c0_JohnDoe), joinRef(join($this(), c0_participants))), $in(global(c0_MaryJane), joinRef(join($this(), c0_participants)))));
c0_JohnAndMaryLine.extending(c0_WaitingLine);
c0_JohnAndMaryLine.addConstraint(equal(joinRef(join($this(), c0_participants)), union(global(c0_JohnDoe), global(c0_MaryJane))));
c0_TwoPersonLine.extending(c0_WaitingLine);
c0_TwoPersonLine.addConstraint(equal(card(join($this(), c0_participants)), constant(2)));
c0_OneToTenPersonLine.extending(c0_WaitingLine);
c0_OneToTenPersonLine.addConstraint(and(greaterThanEqual(card(join($this(), c0_participants)), constant(1)), lessThanEqual(card(join($this(), c0_participants)), constant(10))));
