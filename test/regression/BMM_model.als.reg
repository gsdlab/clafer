open util/integer
pred show {}


fact { #c0_Element = 0 }
abstract sig c0_Element
{}

fact { #c0_End = 0 }
abstract sig c0_End extends c0_Element
{ r_c0_attainable : lone c0_attainable
, r_c0_term : one c0_term
, r_c0_focusedOn : one c0_focusedOn }

sig c0_attainable
{}
{ one @r_c0_attainable.this }

sig c0_term
{ r_c0_short : lone c0_short
, r_c0_long : lone c0_long }
{ one @r_c0_term.this
  let children = (r_c0_short + r_c0_long) | one children }

sig c0_short
{}
{ one @r_c0_short.this }

sig c0_long
{}
{ one @r_c0_long.this }

sig c0_focusedOn
{ r_c0_enterprise : lone c0_enterprise
, r_c0_businessArea : lone c0_businessArea }
{ one @r_c0_focusedOn.this
  let children = (r_c0_enterprise + r_c0_businessArea) | one children }

sig c0_enterprise
{}
{ one @r_c0_enterprise.this }

sig c0_businessArea
{}
{ one @r_c0_businessArea.this }

fact { #c0_Mean = 0 }
abstract sig c0_Mean extends c0_Element
{}

fact { #c0_Vision = 0 }
abstract sig c0_Vision extends c0_End
{ r_c0_amplifiedBy : some c0_amplifiedBy
, r_c0_madeOperativeBy : one c0_madeOperativeBy }
{ some (this.@r_c0_focusedOn).@r_c0_enterprise
  some (this.@r_c0_term).@r_c0_long
  all disj x, y : this.@r_c0_amplifiedBy | (x.@ref) != (y.@ref)  }

sig c0_amplifiedBy
{ ref : one c0_Goal }
{ one @r_c0_amplifiedBy.this }

sig c0_madeOperativeBy
{ ref : one c0_Mission }
{ one @r_c0_madeOperativeBy.this }

fact { #c0_DesiredResult = 0 }
abstract sig c0_DesiredResult extends c0_End
{ r_c0_supportedBy : some c0_supportedBy
, r_c0_kind : one c0_kind }
{ all disj x, y : this.@r_c0_supportedBy | (x.@ref) != (y.@ref)  }

sig c0_supportedBy
{ ref : one c0_CourseOfAction }
{ one @r_c0_supportedBy.this }

sig c0_kind
{ r_c0_qualitative : lone c0_qualitative
, r_c0_quantitative : lone c0_quantitative }
{ one @r_c0_kind.this
  let children = (r_c0_qualitative + r_c0_quantitative) | one children }

sig c0_qualitative
{}
{ one @r_c0_qualitative.this }

sig c0_quantitative
{}
{ one @r_c0_quantitative.this }

fact { #c0_Goal = 0 }
abstract sig c0_Goal extends c0_DesiredResult
{ r_c0_amplifies : one c0_amplifies
, r_c0_general : one c0_general
, r_c0_ongoing : one c0_ongoing }
{ some (this.@r_c0_focusedOn).@r_c0_businessArea
  some this.@r_c0_attainable
  some (this.@r_c0_kind).@r_c0_qualitative
  some (this.@r_c0_term).@r_c0_long }

sig c0_amplifies
{ ref : one c0_Vision }
{ one @r_c0_amplifies.this }

sig c0_general
{}
{ one @r_c0_general.this }

sig c0_ongoing
{}
{ one @r_c0_ongoing.this }

fact { #c0_Objective = 0 }
abstract sig c0_Objective extends c0_DesiredResult
{ r_c0_SMART : one c0_SMART
, r_c0_limitedInTimeframe : one c0_limitedInTimeframe
, r_c0_quantifies : some c0_quantifies }
{ some (this.@r_c0_focusedOn).@r_c0_businessArea
  some (this.@r_c0_kind).@r_c0_quantitative
  some (this.@r_c0_term).@r_c0_short
  all disj x, y : this.@r_c0_quantifies | (x.@ref) != (y.@ref)  }

sig c0_SMART
{ r_c0_specific : one c0_specific
, r_c0_relevant : one c0_relevant
, r_c0_timeBound : one c0_timeBound }
{ one @r_c0_SMART.this
  some (this.~@r_c0_SMART).@r_c0_attainable }

sig c0_specific
{}
{ one @r_c0_specific.this }

sig c0_relevant
{}
{ one @r_c0_relevant.this }

sig c0_timeBound
{}
{ one @r_c0_timeBound.this }

sig c0_limitedInTimeframe
{ r_c0_cyclical : lone c0_cyclical }
{ one @r_c0_limitedInTimeframe.this }

sig c0_cyclical
{}
{ one @r_c0_cyclical.this }

sig c0_quantifies
{ ref : one c0_Goal }
{ one @r_c0_quantifies.this }

fact { #c0_CourseOfAction = 0 }
abstract sig c0_CourseOfAction extends c0_Mean
{ r_c0_channelsEffortsToward : one c0_channelsEffortsToward
, r_c0_governedBy : one c0_governedBy
, r_c0_formulatedBasedOn : one c0_formulatedBasedOn
, r_c0_scope : one c0_scope
, r_c1_term : one c1_term
, r_c0_includes : set c0_includes
, r_c0_enables : set c0_enables }
{ ((some (this.@r_c0_scope).@r_c0_broad) && (some (this.@r_c1_term).@r_c1_long)) || ((some (this.@r_c0_scope).@r_c0_narrow) && (some (this.@r_c1_term).@r_c1_short))
  all disj x, y : this.@r_c0_includes | (x.@ref) != (y.@ref) 
  all disj x, y : this.@r_c0_enables | (x.@ref) != (y.@ref)  }

sig c0_channelsEffortsToward
{ ref : one c0_DesiredResult }
{ one @r_c0_channelsEffortsToward.this }

sig c0_governedBy
{ ref : one c0_Directive }
{ one @r_c0_governedBy.this }

sig c0_formulatedBasedOn
{ ref : one c0_Directive }
{ one @r_c0_formulatedBasedOn.this }

sig c0_scope
{ r_c0_broad : lone c0_broad
, r_c0_narrow : lone c0_narrow }
{ one @r_c0_scope.this
  let children = (r_c0_broad + r_c0_narrow) | one children }

sig c0_broad
{}
{ one @r_c0_broad.this }

sig c0_narrow
{}
{ one @r_c0_narrow.this }

sig c1_term
{ r_c1_short : lone c1_short
, r_c1_long : lone c1_long }
{ one @r_c1_term.this
  let children = (r_c1_short + r_c1_long) | one children }

sig c1_short
{}
{ one @r_c1_short.this }

sig c1_long
{}
{ one @r_c1_long.this }

sig c0_includes
{ ref : one c0_CourseOfAction }
{ one @r_c0_includes.this }

sig c0_enables
{ ref : one c0_CourseOfAction }
{ one @r_c0_enables.this }

fact { #c0_Strategy = 0 }
abstract sig c0_Strategy extends c0_CourseOfAction
{ r_c0_implementedBy : one c0_implementedBy
, r_c0_aComponentOfThePlanFor : one c0_aComponentOfThePlanFor
, r_c0_rightApproachGiven : one c0_rightApproachGiven }

sig c0_implementedBy
{ ref : one c0_Tactic }
{ one @r_c0_implementedBy.this }

sig c0_aComponentOfThePlanFor
{ ref : one c0_Mission }
{ one @r_c0_aComponentOfThePlanFor.this }

sig c0_rightApproachGiven
{}
{ one @r_c0_rightApproachGiven.this }

fact { #c0_Tactic = 0 }
abstract sig c0_Tactic extends c0_CourseOfAction
{ r_c0_implements : one c0_implements
, r_c0_effectsEnforcementLevelOf : one c0_effectsEnforcementLevelOf }

sig c0_implements
{ ref : one c0_Strategy }
{ one @r_c0_implements.this }

sig c0_effectsEnforcementLevelOf
{ ref : one c0_BusinessRule }
{ one @r_c0_effectsEnforcementLevelOf.this }

fact { #c0_Mission = 0 }
abstract sig c0_Mission extends c0_Mean
{ r_c0_makesOperative : one c0_makesOperative
, r_c0_plannedByMeansOf : one c0_plannedByMeansOf }

sig c0_makesOperative
{ ref : one c0_Vision }
{ one @r_c0_makesOperative.this }

sig c0_plannedByMeansOf
{ ref : one c0_Strategy }
{ one @r_c0_plannedByMeansOf.this }

fact { #c0_Directive = 0 }
abstract sig c0_Directive extends c0_Mean
{ r_c0_governs : one c0_governs
, r_c0_sourceOf : one c0_sourceOf
, r_c0_supportsTheAchievementOf : one c0_supportsTheAchievementOf
, r_c0_influencesAspectOfEnterprise : one c0_influencesAspectOfEnterprise
, r_c0_declarative : one c0_declarative
, r_c0_actsAs : one c0_actsAs
, r_c0_degreeOfStructure : one c0_degreeOfStructure
, r_c0_granularity : one c0_granularity
, r_c0_actionable : lone c0_actionable
, r_c0_automatable : lone c0_automatable }

sig c0_governs
{ ref : one c0_CourseOfAction }
{ one @r_c0_governs.this }

sig c0_sourceOf
{ ref : one c0_CourseOfAction }
{ one @r_c0_sourceOf.this }

sig c0_supportsTheAchievementOf
{ ref : one c0_DesiredResult }
{ one @r_c0_supportsTheAchievementOf.this }

sig c0_influencesAspectOfEnterprise
{ r_c0_defines : lone c0_defines
, r_c0_constraints : lone c0_constraints
, r_c0_liberates : lone c0_liberates
, r_c0_asserts : lone c0_asserts
, r_c0_controls : lone c0_controls }
{ one @r_c0_influencesAspectOfEnterprise.this
  let children = (r_c0_defines + r_c0_constraints + r_c0_liberates + r_c0_asserts + r_c0_controls) | one children }

sig c0_defines
{}
{ one @r_c0_defines.this }

sig c0_constraints
{}
{ one @r_c0_constraints.this }

sig c0_liberates
{}
{ one @r_c0_liberates.this }

sig c0_asserts
{}
{ one @r_c0_asserts.this }

sig c0_controls
{}
{ one @r_c0_controls.this }

sig c0_declarative
{}
{ one @r_c0_declarative.this }

sig c0_actsAs
{ ref : one c0_Regulation }
{ one @r_c0_actsAs.this }

sig c0_degreeOfStructure
{ r_c0_lessStructured : lone c0_lessStructured
, r_c0_highlyStructured : lone c0_highlyStructured }
{ one @r_c0_degreeOfStructure.this
  let children = (r_c0_lessStructured + r_c0_highlyStructured) | one children }

sig c0_lessStructured
{}
{ one @r_c0_lessStructured.this }

sig c0_highlyStructured
{}
{ one @r_c0_highlyStructured.this }

sig c0_granularity
{ r_c0_lessDiscreteAndComposite : lone c0_lessDiscreteAndComposite
, r_c0_discreteAndAtomic : lone c0_discreteAndAtomic }
{ one @r_c0_granularity.this
  let children = (r_c0_lessDiscreteAndComposite + r_c0_discreteAndAtomic) | one children }

sig c0_lessDiscreteAndComposite
{}
{ one @r_c0_lessDiscreteAndComposite.this }

sig c0_discreteAndAtomic
{}
{ one @r_c0_discreteAndAtomic.this }

sig c0_actionable
{}
{ one @r_c0_actionable.this }

sig c0_automatable
{}
{ one @r_c0_automatable.this }

fact { #c0_BusinessPolicy = 0 }
abstract sig c0_BusinessPolicy extends c0_Directive
{ r_c0_providesBasisFor : some c0_providesBasisFor
, r_c1_governs : set c1_governs
, r_c1_includes : set c1_includes }
{ all disj x, y : this.@r_c0_providesBasisFor | (x.@ref) != (y.@ref) 
  all disj x, y : this.@r_c1_governs | (x.@ref) != (y.@ref) 
  some (this.@r_c0_degreeOfStructure).@r_c0_lessStructured
  some (this.@r_c0_granularity).@r_c0_lessDiscreteAndComposite
  no this.@r_c0_actionable
  no this.@r_c0_automatable
  all disj x, y : this.@r_c1_includes | (x.@ref) != (y.@ref)  }

sig c0_providesBasisFor
{ ref : one c0_BusinessRule }
{ one @r_c0_providesBasisFor.this }

sig c1_governs
{ ref : one c0_CourseOfAction
, r_c0_control : one c0_control
, r_c0_guide : one c0_guide
, r_c0_shape : one c0_shape }
{ one @r_c1_governs.this }

sig c0_control
{}
{ one @r_c0_control.this }

sig c0_guide
{}
{ one @r_c0_guide.this }

sig c0_shape
{}
{ one @r_c0_shape.this }

sig c1_includes
{ ref : one c0_BusinessPolicy }
{ one @r_c1_includes.this }

fact { #c0_BusinessRule = 0 }
abstract sig c0_BusinessRule extends c0_Directive
{ r_c0_enforcementLevel : one c0_enforcementLevel
, r_c0_hasEnforcementLevelEffectedBy : one c0_hasEnforcementLevelEffectedBy
, r_c0_expressedUsingStandardBusinessVocabulary : one c0_expressedUsingStandardBusinessVocabulary }
{ all  o : this.@r_c0_supportsTheAchievementOf | (o.@ref) in c0_Objective
  some (this.@r_c0_degreeOfStructure).@r_c0_highlyStructured
  some (this.@r_c0_granularity).@r_c0_discreteAndAtomic
  some this.@r_c0_actionable }

sig c0_enforcementLevel
{ r_c0_strictlyEnforced : lone c0_strictlyEnforced
, r_c0_deferredEnforcement : lone c0_deferredEnforcement
, r_c0_preAuthorizedOverride : lone c0_preAuthorizedOverride
, r_c0_postJustifiedOverride : lone c0_postJustifiedOverride
, r_c0_overrideWithExplanation : lone c0_overrideWithExplanation
, r_c0_guideline : lone c0_guideline }
{ one @r_c0_enforcementLevel.this
  let children = (r_c0_strictlyEnforced + r_c0_deferredEnforcement + r_c0_preAuthorizedOverride + r_c0_postJustifiedOverride + r_c0_overrideWithExplanation + r_c0_guideline) | one children }

sig c0_strictlyEnforced
{}
{ one @r_c0_strictlyEnforced.this }

sig c0_deferredEnforcement
{}
{ one @r_c0_deferredEnforcement.this }

sig c0_preAuthorizedOverride
{}
{ one @r_c0_preAuthorizedOverride.this }

sig c0_postJustifiedOverride
{}
{ one @r_c0_postJustifiedOverride.this }

sig c0_overrideWithExplanation
{}
{ one @r_c0_overrideWithExplanation.this }

sig c0_guideline
{}
{ one @r_c0_guideline.this }

sig c0_hasEnforcementLevelEffectedBy
{ ref : one c0_Tactic }
{ one @r_c0_hasEnforcementLevelEffectedBy.this }

sig c0_expressedUsingStandardBusinessVocabulary
{}
{ one @r_c0_expressedUsingStandardBusinessVocabulary.this }

fact { #c0_Regulation = 0 }
abstract sig c0_Regulation extends c0_Element
{ r_c0_aRolePlayedBy : one c0_aRolePlayedBy }

sig c0_aRolePlayedBy
{ ref : one c0_Directive }
{ one @r_c0_aRolePlayedBy.this }

fact { #c0_Influencer = 0 }
abstract sig c0_Influencer extends c0_Element
{ r_c0_externalInfluencer : lone c0_externalInfluencer
, r_c0_internalInfluencer : lone c0_internalInfluencer }

sig c0_externalInfluencer
{ r_c0_environment : lone c0_environment
, r_c0_technology : lone c0_technology
, r_c0_regulation : lone c0_regulation
, r_c0_supplier : lone c0_supplier
, r_c0_customer : lone c0_customer
, r_c0_competitor : lone c0_competitor
, r_c0_partner : lone c0_partner }
{ one @r_c0_externalInfluencer.this
  let children = (r_c0_environment + r_c0_technology + r_c0_regulation + r_c0_supplier + r_c0_customer + r_c0_competitor + r_c0_partner) | some children }

sig c0_environment
{}
{ one @r_c0_environment.this }

sig c0_technology
{}
{ one @r_c0_technology.this }

sig c0_regulation
{ r_c0_prescribedBy : one c0_prescribedBy }
{ one @r_c0_regulation.this }

sig c0_prescribedBy
{ r_c0_government : lone c0_government
, r_c0_management : lone c0_management }
{ one @r_c0_prescribedBy.this
  let children = (r_c0_government + r_c0_management) | one children }

sig c0_government
{}
{ one @r_c0_government.this }

sig c0_management
{}
{ one @r_c0_management.this }

sig c0_supplier
{ r_c0_provides : one c0_provides }
{ one @r_c0_supplier.this }

sig c0_provides
{ r_c0_products : lone c0_products
, r_c0_services : lone c0_services }
{ one @r_c0_provides.this
  let children = (r_c0_products + r_c0_services) | one children }

sig c0_products
{}
{ one @r_c0_products.this }

sig c0_services
{}
{ one @r_c0_services.this }

sig c0_customer
{ r_c0_productsOrServices : one c0_productsOrServices }
{ one @r_c0_customer.this }

sig c0_productsOrServices
{ r_c0_investigated : lone c0_investigated
, r_c0_ordered : lone c0_ordered
, r_c0_received : lone c0_received
, r_c0_paidFor : lone c0_paidFor }
{ one @r_c0_productsOrServices.this
  let children = (r_c0_investigated + r_c0_ordered + r_c0_received + r_c0_paidFor) | one children }

sig c0_investigated
{}
{ one @r_c0_investigated.this }

sig c0_ordered
{}
{ one @r_c0_ordered.this }

sig c0_received
{}
{ one @r_c0_received.this }

sig c0_paidFor
{}
{ one @r_c0_paidFor.this }

sig c0_competitor
{}
{ one @r_c0_competitor.this }

sig c0_partner
{}
{ one @r_c0_partner.this }

sig c0_internalInfluencer
{ r_c0_infrastructure : lone c0_infrastructure
, r_c0_issue : lone c0_issue
, r_c0_assumption : lone c0_assumption
, r_c0_resource : lone c0_resource
, r_c0_habit : lone c0_habit
, r_c0_managementPrerogative : lone c0_managementPrerogative
, r_c0_corporateValue : lone c0_corporateValue }
{ one @r_c0_internalInfluencer.this
  let children = (r_c0_infrastructure + r_c0_issue + r_c0_assumption + r_c0_resource + r_c0_habit + r_c0_managementPrerogative + r_c0_corporateValue) | some children }

sig c0_infrastructure
{}
{ one @r_c0_infrastructure.this }

sig c0_issue
{}
{ one @r_c0_issue.this }

sig c0_assumption
{}
{ one @r_c0_assumption.this }

sig c0_resource
{}
{ one @r_c0_resource.this }

sig c0_habit
{}
{ one @r_c0_habit.this }

sig c0_managementPrerogative
{}
{ one @r_c0_managementPrerogative.this }

sig c0_corporateValue
{ r_c0_explicitCorporateValue : lone c0_explicitCorporateValue
, r_c0_implicitCorporateValue : lone c0_implicitCorporateValue }
{ one @r_c0_corporateValue.this
  let children = (r_c0_explicitCorporateValue + r_c0_implicitCorporateValue) | one children }

sig c0_explicitCorporateValue
{}
{ one @r_c0_explicitCorporateValue.this }

sig c0_implicitCorporateValue
{}
{ one @r_c0_implicitCorporateValue.this }

fact { #c0_Assessment = 0 }
abstract sig c0_Assessment extends c0_Element
{ r_c0_identifies : one c0_identifies
, r_c0_about : one c0_about
, r_c0_affects : one c0_affects
, r_c0_madeBy : one c0_madeBy
, r_c0_uses : set c0_uses
, r_c0_SWOT : one c0_SWOT }
{ all disj x, y : this.@r_c0_uses | (x.@ref) != (y.@ref)  }

sig c0_identifies
{ ref : one c0_PotentialImpact }
{ one @r_c0_identifies.this }

sig c0_about
{ ref : one c0_Influencer }
{ one @r_c0_about.this }

sig c0_affects
{ r_c0_employmentOf : some c0_employmentOf
, r_c0_achievementOf : some c0_achievementOf }
{ one @r_c0_affects.this
  let children = (r_c0_employmentOf + r_c0_achievementOf) | some children
  all disj x, y : this.@r_c0_employmentOf | (x.@ref) != (y.@ref) 
  all disj x, y : this.@r_c0_achievementOf | (x.@ref) != (y.@ref)  }

sig c0_employmentOf
{ ref : one c0_Mean }
{ one @r_c0_employmentOf.this }

sig c0_achievementOf
{ ref : one c0_End }
{ one @r_c0_achievementOf.this }

sig c0_madeBy
{ ref : one c0_OrganizationUnit }
{ one @r_c0_madeBy.this }

sig c0_uses
{ ref : one c0_Assessment }
{ one @r_c0_uses.this }

sig c0_SWOT
{ r_c0_strength : lone c0_strength
, r_c0_weakness : lone c0_weakness
, r_c0_opportunity : lone c0_opportunity
, r_c0_threat : lone c0_threat }
{ one @r_c0_SWOT.this
  let children = (r_c0_strength + r_c0_weakness + r_c0_opportunity + r_c0_threat) | one children }

sig c0_strength
{}
{ one @r_c0_strength.this }

sig c0_weakness
{}
{ one @r_c0_weakness.this }

sig c0_opportunity
{}
{ one @r_c0_opportunity.this }

sig c0_threat
{}
{ one @r_c0_threat.this }

fact { #c0_PotentialImpact = 0 }
abstract sig c0_PotentialImpact extends c0_Element
{ r_c0_significantTo : one c0_significantTo
, r_c0_providesImpetusFor : one c0_providesImpetusFor
, r_c0_type : one c0_type }

sig c0_significantTo
{ ref : one c0_Assessment }
{ one @r_c0_significantTo.this }

sig c0_providesImpetusFor
{ ref : one c0_Directive }
{ one @r_c0_providesImpetusFor.this }

sig c0_type
{ r_c0_risk : lone c0_risk
, r_c0_potentialReward : lone c0_potentialReward }
{ one @r_c0_type.this
  let children = (r_c0_risk + r_c0_potentialReward) | one children }

sig c0_risk
{ r_c0_probabilityOfLoss : one c0_probabilityOfLoss
, r_c0_potentialLoss : one c0_potentialLoss
, r_c0_unitOfMeasure : one c0_unitOfMeasure }
{ one @r_c0_risk.this }

sig c0_probabilityOfLoss
{ ref : one Int }
{ one @r_c0_probabilityOfLoss.this }

sig c0_potentialLoss
{ ref : one Int }
{ one @r_c0_potentialLoss.this }

sig c0_unitOfMeasure
{ ref : one c0_Currency }
{ one @r_c0_unitOfMeasure.this }

sig c0_potentialReward
{ r_c0_probabilityOfGain : one c0_probabilityOfGain
, r_c0_potentialGain : one c0_potentialGain
, r_c1_unitOfMeasure : one c1_unitOfMeasure }
{ one @r_c0_potentialReward.this }

sig c0_probabilityOfGain
{ ref : one Int }
{ one @r_c0_probabilityOfGain.this }

sig c0_potentialGain
{ ref : one Int }
{ one @r_c0_potentialGain.this }

sig c1_unitOfMeasure
{ ref : one c0_Currency }
{ one @r_c1_unitOfMeasure.this }

fact { #c0_Metric = 0 }
abstract sig c0_Metric extends c0_Element
{}

fact { #c0_KeyPerformanceIndicator = 0 }
abstract sig c0_KeyPerformanceIndicator extends c0_Metric
{}

fact { #c0_CriticalSuccessFactor = 0 }
abstract sig c0_CriticalSuccessFactor extends c0_Metric
{}

abstract sig c0_Currency
{}

one sig c0_USD extends c0_Currency
{}

one sig c0_EUR extends c0_Currency
{}

one sig c0_CAD extends c0_Currency
{}

fact { #c0_OrganizationUnit = 0 }
abstract sig c0_OrganizationUnit
{}

fact { #c0_BusinessProcess = 0 }
abstract sig c0_BusinessProcess
{}

