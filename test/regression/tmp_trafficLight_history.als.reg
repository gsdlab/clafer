
/* Definition of timed traces (input independent) */ 
sig State {}

private one sig Ord {
   First: set State,
   Next: State -> State
} {
   pred/totalOrder[State,First,Next]
}

lone sig back in State {}

fun loop : State -> State {
  last -> back
}

fun first: one State { Ord.First }

fun last: one State { State - ((Ord.Next).State) }

fun next : State->State { Ord.Next + loop }

fun prev : State->State { ~this/next }

fun past : State->State { ^(~this/next) }

fun future : State -> State { State <: *this/next }

fun upto[s,s' : State] : set State {
  (s' in s.*(Ord.Next) or finite) implies s.future & ^(Ord.Next).s' else s.*(Ord.Next) + (^(Ord.Next).s' & back.*(Ord.Next))
}


pred finite {
  no loop
}

pred infinite {
  some loop
}

fun localFirst [rel: univ->univ->State, parentSet: univ, child: univ] : State {
       let lifetime = child.(parentSet.rel) | lifetime - (lifetime.next)
}

pred total[rel: univ->univ->State, children: univ] {
   children = ~(rel.State).univ 
}



pred show {}

/* Clafer specifications (input dependent) */

one sig root
{ r_c0_TrafficLight_4 : c0_TrafficLight_4 -> State }
{ all t : State | one r_c0_TrafficLight_4.t }

sig c0_TrafficLight_4
{ r_c0_on : c0_on -> State
, r_c0_off : c0_off -> State }
{ lone localFirst[r_c0_TrafficLight_4, root, this] && lone r_c0_TrafficLight_4.State.this && total[r_c0_TrafficLight_4,c0_TrafficLight_4]
  all t : State | lone r_c0_on.t && 
	lone r_c0_off.t && 
	(no r_c0_TrafficLight_4.t.this => no r_c0_on.t && no r_c0_off.t)
  all t : State | let children = (r_c0_on.t + r_c0_off.t) | one children
  ((one t0 : localFirst[r_c0_TrafficLight_4,c0_TrafficLight_4, this] | some this.@r_c0_off.t0))
  one t : localFirst[r_c0_TrafficLight_4,root, this] | 
  ((infinite and all t':t.*next | (some (this.@r_c0_on.t').@r_c0_normal.t') && ((some t'.next and let t'' = t'.next | no this.@r_c0_on.t'')))) => ((some t.next and let t' = t.next | ((infinite and all t'':t'.*next | no this.@r_c0_on.t'')) || ((some t'':t'.future | some (this.@r_c0_on.t'').@r_c0_normal.t'' and ( all t''': upto[t', t''] | no this.@r_c0_on.t''')))))
  one t : localFirst[r_c0_TrafficLight_4,root, this] | 
  ((infinite and all t':t.*next | (some (this.@r_c0_on.t').@r_c0_flashing.t') && ((some t'.next and let t'' = t'.next | no this.@r_c0_on.t'')))) => ((some t.next and let t' = t.next | ((infinite and all t'':t'.*next | no this.@r_c0_on.t'')) || ((some t'':t'.future | some (this.@r_c0_on.t'').@r_c0_flashing.t'' and ( all t''': upto[t', t''] | no this.@r_c0_on.t'''))))) }

sig c0_on
{ r_c0_normal : c0_normal -> State
, r_c0_flashing : c0_flashing -> State }
{ lone localFirst[r_c0_on, c0_TrafficLight_4, this] && lone r_c0_on.State.this && total[r_c0_on,c0_on]
  all t : State | lone r_c0_normal.t && 
	lone r_c0_flashing.t && 
	(no r_c0_on.t.this => no r_c0_normal.t && no r_c0_flashing.t)
  all t : State | let children = (r_c0_normal.t + r_c0_flashing.t) | one children }

sig c0_normal
{}
{ lone localFirst[r_c0_normal, c0_on, this] && lone r_c0_normal.State.this && total[r_c0_normal,c0_normal] }


sig c0_flashing
{}
{ lone localFirst[r_c0_flashing, c0_on, this] && lone r_c0_flashing.State.this && total[r_c0_flashing,c0_flashing] }



sig c0_off
{}
{ lone localFirst[r_c0_off, c0_TrafficLight_4, this] && lone r_c0_off.State.this && total[r_c0_off,c0_off] }




