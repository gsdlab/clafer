defaultScope(1);
intRange(-8, 7);
stringLength(40);

c0_tristate = Abstract("c0_tristate");
c0_module = c0_tristate.addChild("c0_module").withCard(0, 1);
c0_MISC_FILESYSTEMS = Clafer("c0_MISC_FILESYSTEMS").withCard(0, 1);
c0_display = c0_MISC_FILESYSTEMS.addChild("c0_display").withCard(1, 1);
c0_JFFS2_FS = c0_MISC_FILESYSTEMS.addChild("c0_JFFS2_FS").withCard(0, 1).extending(c0_tristate);
c1_display = c0_JFFS2_FS.addChild("c1_display").withCard(1, 1);
c0_FFS2_FS_DEBUG = c0_JFFS2_FS.addChild("c0_FFS2_FS_DEBUG").withCard(1, 1);
c2_display = c0_FFS2_FS_DEBUG.addChild("c2_display").withCard(1, 1);
c0_JFFS2_FS_WRITEBUFFER = c0_JFFS2_FS.addChild("c0_JFFS2_FS_WRITEBUFFER").withCard(0, 1);
c0_JFFS2_COMPRESS = c0_JFFS2_FS.addChild("c0_JFFS2_COMPRESS").withCard(0, 1);
c3_display = c0_JFFS2_COMPRESS.addChild("c3_display").withCard(1, 1);
c0_JFFS2_ZLIB = c0_JFFS2_COMPRESS.addChild("c0_JFFS2_ZLIB").withCard(0, 1);
c4_display = c0_JFFS2_ZLIB.addChild("c4_display").withCard(1, 1);
c0_CompressionChoice = c0_JFFS2_COMPRESS.addChild("c0_CompressionChoice").withCard(1, 1);
c5_display = c0_CompressionChoice.addChild("c5_display").withCard(1, 1);
c0_choice = c0_CompressionChoice.addChild("c0_choice").withCard(1, 1).withGroupCard(1, 1);
c0_JFFS2_CMODE_NONE = c0_choice.addChild("c0_JFFS2_CMODE_NONE").withCard(0, 1);
c6_display = c0_JFFS2_CMODE_NONE.addChild("c6_display").withCard(1, 1);
c0_JFFS2_CMODE_PRIORITY = c0_choice.addChild("c0_JFFS2_CMODE_PRIORITY").withCard(0, 1);
c7_display = c0_JFFS2_CMODE_PRIORITY.addChild("c7_display").withCard(1, 1);
c0_JFFS2_CMODE_SIZE = c0_choice.addChild("c0_JFFS2_CMODE_SIZE").withCard(0, 1);
c8_display = c0_JFFS2_CMODE_SIZE.addChild("c8_display").withCard(1, 1);
c0_MTD = Clafer("c0_MTD").withCard(1, 1);
c0_CRC32 = Clafer("c0_CRC32").withCard(1, 1);
c0_HAS_IOMEM = Clafer("c0_HAS_IOMEM").withCard(1, 1);
c0_ZLIB_INFLATE = Clafer("c0_ZLIB_INFLATE").withCard(1, 1);
c0_display.refTo(string);
c1_display.refTo(string);
c0_FFS2_FS_DEBUG.refTo(Int);
c2_display.refTo(string);
c3_display.refTo(string);
c4_display.refTo(string);
c5_display.refTo(string);
c6_display.refTo(string);
c7_display.refTo(string);
c8_display.refTo(string);
c0_MISC_FILESYSTEMS.addConstraint(implies(some(join($this(), c0_display)), equal(joinRef(join($this(), c0_display)), constant("\"Miscellaneous filesystems\""))));
c0_JFFS2_FS.addConstraint(implies(some(join($this(), c1_display)), equal(joinRef(join($this(), c1_display)), constant("\"Journalling Flash File System\""))));
c0_JFFS2_FS.addConstraint(some(global(c0_MTD)));
c0_JFFS2_FS.addConstraint(implies(some(global(c0_MTD)), some(global(c0_CRC32))));
c0_JFFS2_FS.addConstraint(ifOnlyIf(some(join($this(), c0_JFFS2_FS_WRITEBUFFER)), some(global(c0_HAS_IOMEM))));
c0_FFS2_FS_DEBUG.addConstraint(equal(joinRef($this()), constant(0)));
c0_FFS2_FS_DEBUG.addConstraint(implies(some(join($this(), c2_display)), equal(joinRef(join($this(), c2_display)), constant("\"JFFS2 Debug level (0=quiet, 2=noisy)\""))));
c0_FFS2_FS_DEBUG.addConstraint(and(lessThanEqual(constant(0), joinRef($this())), lessThanEqual(joinRef($this()), constant(2))));
c0_JFFS2_COMPRESS.addConstraint(implies(some(join($this(), c3_display)), equal(joinRef(join($this(), c3_display)), constant("\"Advanced compression options for JFFS2\""))));
c0_JFFS2_COMPRESS.addConstraint(some(join($this(), c0_JFFS2_ZLIB)));
c0_JFFS2_ZLIB.addConstraint(implies(some(join($this(), c4_display)), equal(joinRef(join($this(), c4_display)), constant("\"Compress w/zlib...\""))));
c0_JFFS2_ZLIB.addConstraint(some(global(c0_ZLIB_INFLATE)));
c0_CompressionChoice.addConstraint(implies(some(join($this(), c5_display)), equal(joinRef(join($this(), c5_display)), constant("\"Default compression\""))));
c0_CompressionChoice.addConstraint(some(join(join($this(), c0_choice), c0_JFFS2_CMODE_PRIORITY)));
c0_JFFS2_CMODE_NONE.addConstraint(implies(some(join($this(), c6_display)), equal(joinRef(join($this(), c6_display)), constant("\"no compression\""))));
c0_JFFS2_CMODE_PRIORITY.addConstraint(implies(some(join($this(), c7_display)), equal(joinRef(join($this(), c7_display)), constant("\"priority\""))));
c0_JFFS2_CMODE_SIZE.addConstraint(implies(some(join($this(), c8_display)), equal(joinRef(join($this(), c8_display)), constant("\"size (EXPERIMENTAL)\""))));
