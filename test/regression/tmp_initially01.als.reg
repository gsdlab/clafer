
/* Definition of timed traces (input independent) */ 
sig State {}

private one sig Ord {
   First: set State,
   Next: State -> State
} {
   pred/totalOrder[State,First,Next]
}

lone sig back in State {}

fun loop : State -> State {
  last -> back
}

fun first: one State { Ord.First }

fun last: one State { State - ((Ord.Next).State) }

fun next : State->State { Ord.Next + loop }

fun prev : State->State { ~this/next }

fun past : State->State { ^(~this/next) }

fun future : State -> State { State <: *this/next }

fun upto[s,s' : State] : set State {
  (s' in s.*(Ord.Next) or finite) implies s.future & ^(Ord.Next).s' else s.*(Ord.Next) + (^(Ord.Next).s' & back.*(Ord.Next))
}


pred finite {
  no loop
}

pred infinite {
  some loop
}

fun localFirst [rel: univ->univ->State, parentSet: univ, child: univ] : State {
       let lifetime = child.(parentSet.rel) | lifetime - (lifetime.next)
}

pred total[rel: univ->univ->State, children: univ] {
   children = ~(rel.State).univ 
}



pred show {}

/* Clafer specifications (input dependent) */

one sig root
{ r_c0_a : c0_a -> State }
{ all t : State | one r_c0_a.t }

sig c0_a
{ r_c0_b : c0_b -> State }
{ lone localFirst[r_c0_a, root, this] && lone r_c0_a.State.this && total[r_c0_a,c0_a]
  all t : State | lone r_c0_b.t && 
	(no r_c0_a.t.this => no r_c0_b.t) }

sig c0_b
{ r_c0_c : c0_c -> State
, r_c0_d : c0_d -> State
, r_c0_e : c0_e -> State }
{ lone localFirst[r_c0_b, c0_a, this] && lone r_c0_b.State.this && total[r_c0_b,c0_b]
  all t : State | lone r_c0_c.t && 
	lone r_c0_d.t && 
	lone r_c0_e.t && 
	(no r_c0_b.t.this => no r_c0_c.t && no r_c0_d.t && no r_c0_e.t)
  ((one t0 : localFirst[r_c0_b,c0_b, this] | some this.@r_c0_c.t0)) }

sig c0_c
{}
{ lone localFirst[r_c0_c, c0_b, this] && lone r_c0_c.State.this && total[r_c0_c,c0_c] }


sig c0_d
{}
{ lone localFirst[r_c0_d, c0_b, this] && lone r_c0_d.State.this && total[r_c0_d,c0_d] }


sig c0_e
{}
{ lone localFirst[r_c0_e, c0_b, this] && lone r_c0_e.State.this && total[r_c0_e,c0_e] }





