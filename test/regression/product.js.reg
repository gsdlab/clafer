scope({c0_N:5});
defaultScope(1);
intRange(-8, 7);
stringLength(16);

c0_N = Abstract("c0_N");
c0_n1 = Clafer("c0_n1").withCard(1, 1);
c0_n2 = Clafer("c0_n2").withCard(1, 1);
c0_n3 = Clafer("c0_n3").withCard(1, 1);
c0_n4 = Clafer("c0_n4").withCard(1, 1);
c0_n5 = Clafer("c0_n5").withCard(1, 1);
c0_p = Clafer("c0_p").withCard(1, 1);
c0_N.refTo(Int);
c0_n1.extending(c0_N);
Constraint(implies(some(global(c0_n1)), equal(joinRef(global(c0_n1)), constant(1))));
c0_n2.extending(c0_N);
Constraint(implies(some(global(c0_n2)), equal(joinRef(global(c0_n2)), constant(2))));
c0_n3.extending(c0_N);
Constraint(implies(some(global(c0_n3)), equal(joinRef(global(c0_n3)), constant(3))));
c0_n4.extending(c0_N);
Constraint(implies(some(global(c0_n4)), equal(joinRef(global(c0_n4)), constant(2))));
c0_n5.extending(c0_N);
Constraint(implies(some(global(c0_n5)), equal(joinRef(global(c0_n5)), constant(3))));
c0_p.refToUnique(Int);
Constraint(implies(some(global(c0_p)), equal(joinRef(global(c0_p)), product(global(c0_N)))));
assert(equal(joinRef(global(c0_p)), constant(36)));
