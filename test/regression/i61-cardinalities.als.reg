open util/integer
pred show {}


one sig c0_A
{ r_c0_b : lone c0_b
, r_c0_c : one c0_c
, r_c0_d : lone c0_d }
{ let children = (r_c0_b + r_c0_c + r_c0_d) | 2 <= #children and #children <= 3 }

lone sig c0_b
{}
{ one r_c0_b }

one sig c0_c
{}

lone sig c0_d
{}
{ one r_c0_d }

one sig c0_E
{ r_c0_f : lone c0_f
, r_c0_g : lone c0_g }
{ let children = (r_c0_f + r_c0_g) | one children }

lone sig c0_f
{}
{ one r_c0_f }

lone sig c0_g
{}
{ one r_c0_g }

assert assertOnLine_14 { (some c0_E.@r_c0_f) || (some c0_E.@r_c0_g) }
check assertOnLine_14 for 1

assert assertOnLine_15 { !((some c0_E.@r_c0_f) && (some c0_E.@r_c0_g)) }
check assertOnLine_15 for 1

one sig c0_D
{ r_c0_Z : one c0_Z
, r_c0_K : lone c0_K }

one sig c0_Z
{}

lone sig c0_K
{}
{ one r_c0_K }

assert assertOnLine_22 { one c0_D }
check assertOnLine_22 for 1

assert assertOnLine_23 { one c0_D.@r_c0_Z }
check assertOnLine_23 for 1

one sig c0_L
{ r_c0_M : one c0_M
, r_c0_N : one c0_N }

one sig c0_M
{}

one sig c0_N
{}

