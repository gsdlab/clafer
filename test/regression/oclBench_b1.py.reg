from jsir.IR import *

c0_Person = Abstract("c0_Person");
c0_name = c0_Person.addChild("c0_name").withCard(1, 1);
c0_civstat = c0_Person.addChild("c0_civstat").withCard(1, 1);
c0_gender = c0_Person.addChild("c0_gender").withCard(1, 1);
c0_alive = c0_Person.addChild("c0_alive").withCard(0, 1);
c0_husband = c0_Person.addChild("c0_husband").withCard(0, 1);
c0_wife = c0_Person.addChild("c0_wife").withCard(0, 1);
c0_ada = Clafer("c0_ada").withCard(1, 1).extending(c0_Person);
c0_cyd = Clafer("c0_cyd").withCard(1, 1).extending(c0_Person);
c0_eve = Clafer("c0_eve").withCard(1, 1).extending(c0_Person);
c0_bob = Clafer("c0_bob").withCard(1, 1).extending(c0_Person);
c0_dan = Clafer("c0_dan").withCard(1, 1).extending(c0_Person);
c0_adaBobCyd = Clafer("c0_adaBobCyd");
c0_personWithUndefinedHusband1 = Clafer("c0_personWithUndefinedHusband1");
c0_personWithUndefinedHusband2 = Clafer("c0_personWithUndefinedHusband2");
c0_personWithNoWife = Clafer("c0_personWithNoWife");
c0_emptyPersonSet1 = Clafer("c0_emptyPersonSet1");
c0_emptyPersonSet2 = Clafer("c0_emptyPersonSet2");
c0_personPair = Clafer("c0_personPair");
c0_first = c0_personPair.addChild("c0_first").withCard(1, 1);
c0_second = c0_personPair.addChild("c0_second").withCard(1, 1);
c0_possiblePairs = Clafer("c0_possiblePairs");
c0_stringSet1 = Clafer("c0_stringSet1").withCard(3, 3);
c0_stringSet2 = Clafer("c0_stringSet2").withCard(4, 4);
c0_name.refTo(string);
c0_civstat.refTo(string);
c0_gender.refTo(string);
c0_husband.refTo(c0_Person);
c0_wife.refTo(c0_Person);
c0_adaBobCyd.refToUnique(c0_Person);
c0_personWithUndefinedHusband1.refToUnique(c0_Person);
c0_personWithUndefinedHusband2.refToUnique(c0_Person);
c0_personWithNoWife.refToUnique(c0_Person);
c0_emptyPersonSet1.refToUnique(c0_Person);
c0_emptyPersonSet2.refToUnique(c0_Person);
c0_first.refTo(c0_Person);
c0_second.refTo(c0_Person);
c0_possiblePairs.refToUnique(c0_personPair);
c0_stringSet1.refToUnique(string);
c0_stringSet2.refToUnique(string);
Constraint(equal(joinRef(join(joinRef(glob(c0_adaBobCyd)), c0_name)), joinRef(glob(c0_stringSet1))));
Constraint(equal(joinRef(join(joinRef(glob(c0_personWithUndefinedHusband1)), c0_name)), joinRef(glob(c0_stringSet2))));
Constraint(equal(joinRef(join(joinRef(glob(c0_personWithUndefinedHusband2)), c0_name)), joinRef(glob(c0_stringSet2))));
Constraint(and(equal(joinRef(join(joinRef(join(joinRef(glob(c0_possiblePairs)), c0_first)), c0_name)), constant("\"Ada\"")), equal(joinRef(join(joinRef(join(joinRef(glob(c0_possiblePairs)), c0_second)), c0_name)), constant("\"Bob\""))));
Constraint(all([decl([p = local("p")], glob(c0_Person))], implies(set_in(joinRef(join(p, c0_name)), joinRef(glob(c0_stringSet1))), set_in(p, joinRef(glob(c0_adaBobCyd))))));
Constraint(all([decl([p = local("p")], glob(c0_Person))], implies(equal(joinRef(join(p, c0_husband)), joinRef(glob(c0_emptyPersonSet1))), set_in(p, joinRef(glob(c0_personWithUndefinedHusband1))))));
Constraint(all([decl([p = local("p")], glob(c0_Person))], implies(equal(joinRef(join(p, c0_husband)), joinRef(glob(c0_emptyPersonSet2))), set_in(p, joinRef(glob(c0_personWithUndefinedHusband2))))));
Constraint(all([decl([p = local("p")], glob(c0_Person))], implies(none(join(p, c0_wife)), set_in(p, joinRef(glob(c0_personWithNoWife))))));
Constraint(equal(joinRef(glob(c0_emptyPersonSet1)), joinRef(join(joinRef(glob(c0_personWithNoWife)), c0_wife))));
Constraint(all([decl([p = local("p"), q = local("q")], glob(c0_Person))], implies(and(and(and(and(and(equal(joinRef(join(p, c0_gender)), constant("\"female\"")), some(join(p, c0_alive))), notEqual(joinRef(join(p, c0_civstat)), constant("\"married\""))), equal(joinRef(join(q, c0_gender)), constant("\"male\""))), some(join(q, c0_alive))), notEqual(joinRef(join(q, c0_civstat)), constant("\"married\""))), one([decl([pair = local("pair")], glob(c0_personPair))], and(and(equal(joinRef(join(pair, c0_first)), p), equal(joinRef(join(pair, c0_second)), q)), set_in(pair, joinRef(glob(c0_possiblePairs))))))));
c0_Person.addConstraint(or(or(or(equal(joinRef(join($this(), c0_civstat)), constant("\"single\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"married\""))), equal(joinRef(join($this(), c0_civstat)), constant("\"divorced\""))), equal(joinRef(join($this(), c0_civstat)), constant("\"widowed\""))));
c0_Person.addConstraint(or(equal(joinRef(join($this(), c0_gender)), constant("\"female\"")), equal(joinRef(join($this(), c0_gender)), constant("\"male\""))));
c0_Person.addConstraint(all([decl([p = local("p")], glob(c0_Person))], implies(notEqual($this(), p), notEqual(joinRef(join($this(), c0_name)), joinRef(join(p, c0_name))))));
c0_Person.addConstraint(one([decl([p = local("p")], glob(c0_Person))], equal(joinRef(join(p, c0_name)), joinRef(join($this(), c0_name)))));
c0_husband.addConstraint(set_in(joinParent($this()), joinRef(join(joinRef($this()), c0_wife))));
c0_wife.addConstraint(set_in(joinParent($this()), joinRef(join(joinRef($this()), c0_husband))));
c0_ada.addConstraint(and(and(and(and(and(equal(joinRef(join($this(), c0_name)), constant("\"Ada\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"widowed\""))), equal(joinRef(join($this(), c0_gender)), constant("\"female\""))), some(join($this(), c0_alive))), none(join($this(), c0_husband))), none(join($this(), c0_wife))));
c0_cyd.addConstraint(and(and(and(and(and(equal(joinRef(join($this(), c0_name)), constant("\"Cyd\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"married\""))), equal(joinRef(join($this(), c0_gender)), constant("\"male\""))), none(join($this(), c0_alive))), none(join($this(), c0_husband))), none(join($this(), c0_wife))));
c0_eve.addConstraint(and(and(and(and(and(equal(joinRef(join($this(), c0_name)), constant("\"Eve\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"married\""))), equal(joinRef(join($this(), c0_gender)), constant("\"female\""))), some(join($this(), c0_alive))), equal(joinRef(join($this(), c0_husband)), glob(c0_dan))), none(join($this(), c0_wife))));
c0_bob.addConstraint(and(and(and(and(and(equal(joinRef(join($this(), c0_name)), constant("\"Bob\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"divorced\""))), equal(joinRef(join($this(), c0_gender)), constant("\"male\""))), some(join($this(), c0_alive))), none(join($this(), c0_husband))), none(join($this(), c0_wife))));
c0_dan.addConstraint(and(and(and(and(and(equal(joinRef(join($this(), c0_name)), constant("\"Dan\"")), equal(joinRef(join($this(), c0_civstat)), constant("\"married\""))), equal(joinRef(join($this(), c0_gender)), constant("\"male\""))), some(join($this(), c0_alive))), none(join($this(), c0_husband))), equal(joinRef(join($this(), c0_wife)), glob(c0_eve))));
c0_adaBobCyd.addConstraint(set_in(joinRef(join(joinRef($this()), c0_name)), joinRef(glob(c0_stringSet1))));
c0_personWithUndefinedHusband1.addConstraint(equal(joinRef(join(joinRef($this()), c0_husband)), joinRef(glob(c0_emptyPersonSet1))));
c0_personWithUndefinedHusband2.addConstraint(equal(joinRef(join(joinRef($this()), c0_husband)), joinRef(glob(c0_emptyPersonSet2))));
c0_personWithNoWife.addConstraint(none(join(joinRef($this()), c0_wife)));
c0_emptyPersonSet2.addConstraint(greaterThan(constant(1), constant(2)));
c0_possiblePairs.addConstraint(and(and(and(equal(joinRef(join(joinRef(join(joinRef($this()), c0_first)), c0_gender)), constant("\"female\"")), some(join(joinRef(join(joinRef($this()), c0_first)), c0_alive))), notEqual(joinRef(join(joinRef(join(joinRef($this()), c0_first)), c0_civstat)), constant("\"married\""))), and(and(equal(joinRef(join(joinRef(join(joinRef($this()), c0_second)), c0_gender)), constant("\"male\"")), some(join(joinRef(join(joinRef($this()), c0_second)), c0_alive))), notEqual(joinRef(join(joinRef(join(joinRef($this()), c0_second)), c0_civstat)), constant("\"married\"")))));
c0_stringSet1.addConstraint(or(or(equal(joinRef($this()), constant("\"Ada\"")), equal(joinRef($this()), constant("\"Bob\""))), equal(joinRef($this()), constant("\"Cyd\""))));
c0_stringSet2.addConstraint(or(or(or(equal(joinRef($this()), constant("\"Ada\"")), equal(joinRef($this()), constant("\"Bob\""))), equal(joinRef($this()), constant("\"Cyd\""))), equal(joinRef($this()), constant("\"Dan\""))));
scope({c0_Person:5, c0_adaBobCyd:5, c0_alive:5, c0_civstat:5, c0_emptyPersonSet1:5, c0_emptyPersonSet2:5, c0_gender:5, c0_husband:5, c0_name:5, c0_personWithNoWife:5, c0_personWithUndefinedHusband1:5, c0_personWithUndefinedHusband2:5, c0_stringSet1:3, c0_stringSet2:4, c0_wife:5});
defaultScope(1);
stringLength(16);
