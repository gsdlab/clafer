abstract Prof
	 prefer -> TA *
	 reject -> TA *
	 [no ( this.prefer & this.reject)]

abstract Course
	 lecturer -> Prof
	 assistants -> TA *
	    [parent in (this.first, this.second, this.third) ]
	 allocation -> integer
	 [all ta : this.assistants |  this in (ta.first, ta.second, ta.third) ]// fact respectTAWishes
	 [no (this.assistants & this.lecturer.reject)] // fact respectProfWishes

abstract TA
	 first -> Course ?
	 second -> Course ?
	 third -> Course ?
	 [all disj c1;c2 : Course |this in c1.assistants => this not in c2.assistants ] // fact SingleCoursePerTA


// Start Specifying instances of clafers.

X : Prof
Y : Prof


A : TA
B : TA
C : TA
D : TA
E : TA
F : TA
G : TA

ECE155 : Course
ECE351 : Course

[ECE155.lecturer = X ]
[ECE351.lecturer = Y]


[ECE155.allocation = 3]
[ECE351.allocation = 2]


[X.prefer = A ++ B ]
[Y.prefer = A ++ B ++ C]

[X.reject = F ++ G ]
[Y.reject = D ++ G ]


[A.first = ECE155]
[A.second = ECE351]

[B.first = ECE351]
[B.second = ECE155]

[C.first = ECE155]
[C.second = ECE351]

[D.first = ECE351]
[D.second = ECE155]

[E.first = ECE155]
[E.second = ECE351]

[no TA.third]

//[ # assistants <: first  < 10]



// prof happiness: got preferred TAs.

// prof unhappiness: unallocated spaces

// TA Happiness: got first job.
// << max # (assistants <: first) >>
// TA unhappiness: didn't get a job.
<< min #   (TA -- Course.assistants) >>
