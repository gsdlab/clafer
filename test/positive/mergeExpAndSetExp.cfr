// now primitive types can be used as types of references, which may be useful for redefinition
abstract intNumber -> integer

// this is a proper type refinement of 'integer'
numberOne : intNumber -> 1

abstract name -> string

// this is a proper type refinement of 'string'
alice : name -> "Alice"

abstract realNumber -> real

// these are proper type refinements of 'real'
pi : realNumber -> 3.1415
piDouble : realNumber -> 3.14e0
piInt : realNumber -> 3

abstract doubleNumber : realNumber -> double
numberTwentyFive : doubleNumber -> 2.5e1

abstract intNumber2 : realNumber -> integer
numberThree : intNumber2 -> 3

// this is a proper type refinements of 'double'
abstract intNumber3 : doubleNumber -> integer
numberFour : intNumber2 -> 4

// enumerated type from integers
likertScaleVal -> 1, 2, 3, 4, 5

// non-zero integer
nonZero -> integer -- 0

// but primitive types cannot be used as super types (they trigger parse error)
// n : 1
// s : "Alice"
// d : 3.1415

abstract Person
    abstract Head
    likes -> Person ?

Alice : Person
    `Head
    [ likes = Ella ]

// however, now we can use . as super type expressions
Ella : Person
    h : Person.Head
    [ no likes ]

// expressions now allowed as reference target
heads -> Person.Head *

friend -> Alice ++ Ella *

onlyAlice -> Alice ** Person

exceptElla -> Person -- Ella *

// but above expressions are not allowed as a super type (they trigger a parse error)
