entrypoints Module, Clafer, Constraint, SoftConstraint, Goal ;


-- To regenerate grammar (see src/Makefile, the goal 'grammar'):
--         cd src/
--         bnfc -p "Language.Clafer.Front" --ghc clafer.cf
--         happy -gca Language/Clafer/Front/Parclafer.y
--         alex -g Language/Clafer/Front/Lexclafer.x

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" PosIdent "=" [EnumId] ;
ElementDecl.    Declaration ::= Element ;

Clafer.         Clafer ::= Abstract [TempModifier] GCard PosIdent Super Reference Card Init Transition Elements ;
Constraint.     Constraint ::= "[" [Exp] "]" ;
SoftConstraint. SoftConstraint ::= "assert" "[" [Exp] "]";
Goal.           Goal ::= "<<" [Exp] ">>" ;

Initial.        TempModifier ::= "initial";
Final.          TempModifier ::= "final";

TransitionEmpty.           Transition ::= ;
Transition.                Transition ::= TransArrow Exp;

AbstractEmpty.  Abstract ::= ;
Abstract.       Abstract ::= "abstract" ;

ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [Element] "}" ;

Subclafer.      Element ::= Clafer ;
ClaferUse.      Element ::= "`" Name Card Elements ;
Subconstraint.  Element ::= Constraint ;
Subgoal.        Element ::= Goal;
Subsoftconstraint. Element ::= SoftConstraint;

SuperEmpty.     Super ::= ;
SuperSome.      Super ::= ":" SetExp ;

ReferenceEmpty. Reference ::= ;
ReferenceSet.   Reference ::= "->" SetExp ;
ReferenceBag.   Reference ::= "->>" SetExp ;

InitEmpty.      Init ::= ;
InitSome.       Init ::= InitHow Exp ;

InitConstant.   InitHow ::= "=" ;
InitDefault.    InitHow ::= ":=" ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= NCard ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardNum.        Card ::= PosInteger ;
CardInterval.   Card ::= NCard ;

NCard.          NCard  ::= PosInteger ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= PosInteger ;

Path.           Name ::= [ModId] ;

-- Transition expressions are right associative and has lowest precedence
TransitionExp.  Exp ::= Exp1 TransArrow Exp ;
DeclAllDisj.    Exp1   ::= "all" "disj" Decl "|" Exp1 ;
DeclAll.        Exp1   ::= "all"        Decl "|" Exp1 ;
DeclQuantDisj.  Exp1   ::= Quant "disj" Decl "|" Exp1 ;
DeclQuant.      Exp1   ::= Quant        Decl "|" Exp1 ;
LetExp.         Exp1 ::= "let" VarBinding "in" Exp1;
TmpPatNever.    Exp2 ::= "never" Exp3 PatternScope;
TmpPatSometime. Exp2 ::= "sometime" Exp3 PatternScope;
TmpPatLessOrOnce. Exp2 ::= "lonce" Exp3 PatternScope;
TmpPatAlways.   Exp2 ::= "always" Exp3 PatternScope;
TmpPatPrecede.  Exp2 ::= Exp3 "must" "precede" Exp3 PatternScope;
TmpPatFollow.   Exp2 ::= Exp3 "must" "follow" Exp3 PatternScope;
TmpInitially.   Exp2 ::= "initially" Exp3;
TmpFinally.     Exp2 ::= "finally" Exp3;
EGMax.          Exp3  ::= "max" Exp4 ;
EGMin.          Exp3  ::= "min" Exp4 ;
EIff.           Exp3  ::= Exp3 "<=>" Exp4 ;
EImplies.       Exp4  ::= Exp4 "=>"  Exp5 ;
EOr.            Exp5  ::= Exp5 "||"  Exp6 ;
EXor.           Exp6  ::= Exp6 "xor" Exp7 ;
EAnd.           Exp7  ::= Exp7 "&&"  Exp8 ;
LtlU.           Exp8  ::= Exp8 "U"  Exp9 ;
TmpUntil.       Exp8  ::= Exp8 "until"  Exp9 ;
LtlW.           Exp9  ::= Exp9 "W"  Exp10 ;
TmpWUntil.      Exp9  ::= Exp9 "weakuntil"  Exp10 ;
LtlF.           Exp10  ::= "F"  Exp10 ;
TmpEventually.  Exp10  ::= "eventually"  Exp10 ;
LtlG.           Exp10  ::= "G"  Exp10 ;
TmpGlobally.    Exp10  ::= "globally"  Exp10 ;
LtlX.           Exp10  ::= "X"  Exp10 ;
TmpNext.        Exp10  ::= "next"  Exp10 ;
ENeg.           Exp11  ::= "!" Exp11 ;
ELt.            Exp15  ::= Exp15 "<"  Exp16 ;
EGt.            Exp15  ::= Exp15 ">"  Exp16 ;
EEq.            Exp15  ::= Exp15 "="  Exp16 ;
ELte.           Exp15  ::= Exp15 "<=" Exp16 ;
EGte.           Exp15  ::= Exp15 ">=" Exp16 ;
ENeq.           Exp15  ::= Exp15 "!=" Exp16 ;
EIn.            Exp15  ::= Exp15 "in" Exp16 ;
ENin.           Exp15  ::= Exp15 "not" "in" Exp16 ;
QuantExp.       Exp16  ::= Quant Exp20 ;
EAdd.           Exp17  ::= Exp17  "+" Exp18 ;
ESub.           Exp17  ::= Exp17  "-" Exp18 ;
EMul.           Exp18 ::= Exp18 "*" Exp19 ;
EDiv.           Exp18 ::= Exp18 "/" Exp19 ;
ERem.           Exp10 ::= Exp10 "%" Exp11 ;
ESumSetExp.     Exp19 ::= "sum" Exp20;
EProdSetExp.    Exp19 ::= "product" Exp20;
ECSetExp.       Exp19 ::= "#" Exp20 ;
EMinExp.        Exp19 ::= "-" Exp20 ;
EImpliesElse.   Exp20 ::= "if" Exp20 "then" Exp20 "else" Exp21 ;
EInt.           Exp21 ::= PosInteger ;
EDouble.        Exp21 ::= PosDouble ;
EStr.           Exp21 ::= PosString ;
ESetExp.        Exp21 ::= SetExp ;

TransGuard.      TransGuard ::= Exp1;

SyncTransArrow.            TransArrow ::= "-->>";
GuardedSyncTransArrow.     TransArrow ::= "-[" TransGuard "]->>";
NextTransArrow.            TransArrow ::= "-->";
GuardedNextTransArrow.     TransArrow ::= "-[" TransGuard "]->";

PatScopeBefore.     PatternScope ::= "before" Exp11 ;
PatScopeAfter.      PatternScope ::= "after" Exp11 ;
PatScopeBetweenAnd. PatternScope ::= "between" Exp11 "and" Exp11 ;
PatScopeAfterUntil. PatternScope ::= "after" Exp11 "until" Exp11 ;
PatScopeEmpty.      PatternScope ::= ;

Union.          SetExp  ::= SetExp  "++" SetExp1 ;
UnionCom.       SetExp  ::= SetExp  ","  SetExp1 ;
Difference.     SetExp1 ::= SetExp1 "--" SetExp2 ;
Intersection.   SetExp2 ::= SetExp2 "**"  SetExp3 ;
Domain.         SetExp3 ::= SetExp3 "<:" SetExp4 ;
Range.          SetExp4 ::= SetExp4 ":>" SetExp5 ;
Join.           SetExp5 ::= SetExp5 "."  SetExp6 ;
ClaferId.       SetExp6 ::= Name ;

Decl.           Decl ::= [LocId] ":" SetExp ;

VarBinding.     VarBinding ::= LocId "=" Name ;

QuantNo.        Quant ::= "no" ;
QuantNot.       Quant ::= "not" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

EnumIdIdent.    EnumId ::= PosIdent ;
ModIdIdent.     ModId  ::= PosIdent ;
LocIdIdent.     LocId  ::= PosIdent ;

separator           Declaration ""  ;
separator  nonempty EnumId      "|" ;
separator           Element     ""  ;
separator           Exp         ""  ;
separator           TempModifier ""  ;
separator  nonempty LocId       ";" ;
separator  nonempty ModId       "\\" ;

coercions Exp 21 ;
coercions SetExp 6 ;

position token PosInteger (digit+) ;
position token PosDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PosString '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;
position token PosIdent (letter (letter|digit|'_'|'\'')*) ;
